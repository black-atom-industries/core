name: My Advanced Workflow

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

env:
  SERVICE_URL: "https://example.com"
  API_TOKEN: ${{ secrets.API_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          if [[ -n $CI_COMMIT_TAG ]]; then
            echo "This is a tagged build"
            npm run build -- --prod
          else
            echo "This is a non-tagged build"
            npm run build
          fi

      - name: Run Unit Tests
        run: |
          source venv/bin/activate
          pytest tests/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ env.SERVICE_URL }}
    steps:
      - name: Deploy Code
        run: |
          if [[ $GITHUB_REF == refs/heads/$DEPLOY_BRANCH ]]; then
            echo "Deploying to production"
            ssh user@server "cd /path/to/project && git pull && npm run deploy"
          else
            echo "This is not the production branch, skipping deployment"
          fi

  integration-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run Integration Tests
        run: |
          source venv/bin/activate
          pytest tests/integration/

      - name: Publish Test Results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: tests/results/

  deploy-staging:
    needs: integration-tests
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ env.SERVICE_URL }}/staging
    steps:
      - name: Deploy Code
        run: |
          echo "Deploying to staging..."
          ssh user@${{ env.SERVICE_URL }} "cd /var/www/staging && git pull"
          echo "Deployment complete."

      - name: Test Staging Environment
        run: |
          curl -s -o /dev/null -w "%{http_code}" ${{ env.SERVICE_URL }}/staging
        env:
          SERVICE_URL: ${{ env.SERVICE_URL }}/staging

      - name: Slack Notification
        if: ${{ job.status == 'failure' }}
        uses: rtCamp/action-slack-notify@v2.0
        with:
          status: ${{ job.status }}
          text: |
            :red_circle: Deploy to staging failed
            ${GITHUB_REPOSITORY}:${GITHUB_SHA} by ${GITHUB_ACTOR}

          color: "danger"
          author_name: "GitHub Actions"
          author_icon: "https://avatars3.githubusercontent.com/u/6061683?s=200&v=4"
          footer: "GitHub Actions"
          ts: ${{ github.event.client_payload.timestamp }}
